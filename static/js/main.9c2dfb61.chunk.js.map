{"version":3,"sources":["ColorModeSwitcher.tsx","components/card.tsx","components/Form.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Card_visita","img","nome","cpf","saida","horario","today","Date","getHours","getMinutes","getSeconds","getHoras","py","maxW","w","bg","boxShadow","rounded","overflow","h","src","objectFit","justify","mt","alt","css","border","p","spacing","align","mb","fontWeight","fontFamily","direction","_hover","transform","videoConstraints","width","height","facingMode","Form_visita","webcamRef","React","useRef","useState","imagem","setImage","setNome","setCpf","capture","useCallback","imageSrc","current","getScreenshot","position","as","SimpleGrid","columns","base","md","lg","sm","lineHeight","bgGradient","bgClip","audio","ref","screenshotFormat","e","preventDefault","type","placeholder","_placeholder","value","onChange","target","mask","required","maxLength","isDisabled","top","left","style","filter","Blur","viewBox","fill","xmlns","cx","cy","r","App","theme","textAlign","justifySelf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c2dfb61.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import {\r\n    Heading,\r\n    Avatar,\r\n    Box,\r\n    Center,\r\n    Image,\r\n    Flex,\r\n    Text,\r\n    Stack,\r\n    Button,\r\n    useColorModeValue,\r\n  } from '@chakra-ui/react';\r\n  interface CardProps {\r\n    img: string;\r\n    nome:string;\r\n    cpf:string;\r\n    saida:string;\r\n  }\r\n  function getHoras(){\r\n    var today = new Date();\r\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    return time\r\n}\r\n  export default function Card_visita({img,nome,cpf,saida}:CardProps) {\r\n    const horario = getHoras()\r\n    return (\r\n      <Center py={6}>\r\n        <Box\r\n          maxW={'270px'}\r\n          w={'full'}\r\n          bg={useColorModeValue('white', 'gray.800')}\r\n          boxShadow={'2xl'}\r\n          rounded={'md'}\r\n          overflow={'hidden'}>\r\n          <Image\r\n            h={'120px'}\r\n            w={'full'}\r\n            src={\r\n              'https://images.unsplash.com/photo-1636311550998-c6b6f26fd58a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=735&q=80'\r\n            }\r\n            objectFit={'cover'}\r\n          />\r\n          <Flex justify={'center'} mt={-12}>\r\n             <Avatar\r\n              size={'xl'}\r\n              src={\r\n                img\r\n              }\r\n              alt={'Author'}\r\n              css={{\r\n                border: '3px solid white',\r\n              }}\r\n            />\r\n          </Flex>\r\n  \r\n          <Box p={6}>\r\n            <Stack spacing={0} align={'center'} mb={5}>\r\n            <Heading fontSize={'xl'} fontWeight={500} fontFamily={'arial'}>\r\n                VISITANTE\r\n              </Heading>\r\n              <Heading fontSize={'xl'} fontWeight={500} fontFamily={'body'}>\r\n              {nome==''? '': nome}\r\n              </Heading>\r\n              <Text fontSize={'sm'} color={'gray.500'}>{cpf==''?'':cpf}</Text>\r\n            </Stack>\r\n  \r\n            <Stack direction={'row'} justify={'center'} spacing={6}>\r\n              <Stack spacing={0} align={'center'}>\r\n                  \r\n                <Text fontWeight={600}>{horario}</Text>\r\n                <Text fontSize={'sm'} color={'gray.500'}>\r\n                  Entrada\r\n                </Text>\r\n              </Stack>\r\n              \r\n              {saida==''?<Stack spacing={0} align={'center'}>\r\n                <Text fontWeight={600}>10:52</Text>\r\n                <Text fontSize={'sm'} color={'gray.500'}>\r\n                  Saída\r\n                </Text>\r\n              </Stack>:''}\r\n            </Stack>\r\n  \r\n            <Button\r\n              w={'full'}\r\n              mt={8}\r\n              bg={useColorModeValue('#151f21', 'gray.900')}\r\n              color={'white'}\r\n              rounded={'md'}\r\n              _hover={{\r\n                transform: 'translateY(-2px)',\r\n                boxShadow: 'lg',\r\n              }}>\r\n              Imprimir\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Center>\r\n    );\r\n  }","import React,{useState} from 'react';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Stack,\r\n  Heading,\r\n  Text,\r\n  Container,\r\n  Input,\r\n  Button,\r\n  SimpleGrid,\r\n  Avatar,\r\n  AvatarGroup,\r\n  IconProps,\r\n  Image,\r\n  Icon,\r\n} from '@chakra-ui/react';\r\nimport InputMask from \"react-input-mask\";\r\nimport Webcam from \"react-webcam\";\r\nimport Card_visita from './card';\r\nconst avatars = [\r\n  {\r\n    name: 'Ryan Florence',\r\n    url: 'https://bit.ly/ryan-florence',\r\n  },\r\n  {\r\n    name: 'Segun Adebayo',\r\n    url: 'https://bit.ly/sage-adebayo',\r\n  }\r\n];\r\n\r\nconst videoConstraints = {\r\n  width: 1280,\r\n  height: 720,\r\n  facingMode: \"user\"\r\n};\r\n\r\n\r\n\r\nexport default function Form_visita() {\r\n  const webcamRef = React.useRef(null);\r\n  const [imagem, setImage] = useState ('');\r\n  const [nome,setNome]=useState('')\r\n  const [cpf,setCpf]=useState('')\r\n\r\n  const capture = React.useCallback(\r\n    () => {\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      setImage(imageSrc)\r\n    },\r\n    [webcamRef]\r\n  );\r\n\r\n \r\n  \r\n  return (\r\n    <Box position={'relative'}>\r\n      <Container\r\n        as={SimpleGrid}\r\n        maxW={'7xl'}\r\n        columns={{ base: 1, md: 2 }}\r\n        spacing={{ base: 10, lg: 32 }}\r\n        py={{ base: 10, sm: 20, lg: 32 }}>\r\n        <Stack spacing={{ base: 10, md: 20 }}>\r\n          \r\n          <Heading\r\n            lineHeight={1.1}\r\n            fontSize={{ base: '2xl', sm: '3xl', md: '4xl', lg: '5xl' }}>\r\n           Sistema de check-in{' '}\r\n            <Text\r\n              as={'span'}\r\n              bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n              bgClip=\"text\">\r\n              &\r\n            </Text>{' '}\r\n            check-out <br/>{' '}\r\n            <Text\r\n              as={'span'}\r\n              bgGradient=\"linear(to-r, blue.400,pink.400)\"\r\n              bgClip=\"text\">\r\n              Faça seu registro agora mesmo \r\n            </Text>{' '}\r\n            \r\n\r\n                <Container>\r\n\r\n                {imagem==''?<Webcam\r\n                audio={false}\r\n                height={720}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={720}\r\n                videoConstraints={videoConstraints}\r\n                />: <Image src={imagem}/>}\r\n\r\n                {imagem!=''?\r\n                <Button onClick={(e)=>\r\n                {\r\n                e.preventDefault();\r\n                setImage('')\r\n                }}>\r\n                Capturar Novamente </Button>:<Button onClick={(e)=>{e.preventDefault();capture();}}>Capturar Foto</Button>\r\n                }\r\n\r\n\r\n\r\n\r\n                </Container>\r\n\r\n           \r\n          </Heading> \r\n\r\n         \r\n        </Stack>\r\n        <Stack\r\n          bg={'gray.50'}\r\n          rounded={'xl'}\r\n          p={{ base: 4, sm: 6, md: 8 }}\r\n          spacing={{ base: 8 }}\r\n          maxW={{ lg: 'lg' }}>\r\n          <Stack spacing={4}>\r\n            <Heading\r\n              color={'gray.800'}\r\n              lineHeight={1.1}\r\n              fontSize={{ base: '2xl', sm: '3xl', md: '4xl' }}>\r\n              Preencha os campos abaixo\r\n             \r\n            </Heading>\r\n            <Text color={'gray.500'} fontSize={{ base: 'sm', sm: 'md' }}>\r\n              Observação os dados informados aqui não são compartilhados de forma externa\r\n            </Text>\r\n          </Stack>\r\n          <Box as={'form'} mt={10}>\r\n            <Stack spacing={4}>\r\n              <Input\r\n                type=\"text\"\r\n                placeholder=\"Nome completo\"\r\n                bg={'gray.100'}\r\n                border={0}\r\n                color={'gray.500'}\r\n                _placeholder={{\r\n                  color: 'gray.500',\r\n                }}\r\n                value={nome} onChange={e=>setNome(e.target.value)}\r\n              />\r\n              <Input \r\n                mask=\"999.999.999-99\"\r\n                required\r\n                placeholder=\"(CPF)\"\r\n                bg={'gray.100'}\r\n                maxLength=\"11\"\r\n                border={0}\r\n                color={'gray.500'}\r\n                _placeholder={{\r\n                  color: 'black.500',\r\n                }}\r\n                value={cpf} onChange={e=>setCpf(e.target.value)}\r\n              />\r\n              <Input\r\n                placeholder=\"Motivo da visita\"\r\n                type=\"textarea\"\r\n                bg={'gray.100'}\r\n                border={0}\r\n                color={'gray.500'}\r\n                _placeholder={{\r\n                  color: 'gray.500',\r\n                }}\r\n              />\r\n              <Input\r\n                placeholder=\"Outro documento ?\"\r\n                type=\"textarea\"\r\n                bg={'gray.100'}\r\n                border={0}\r\n                color={'gray.500'}\r\n                _placeholder={{\r\n                  color: 'gray.500',\r\n                }}\r\n              />\r\n              \r\n            </Stack>\r\n           \r\n            {imagem==''?  <Button\r\n              fontFamily={'heading'}\r\n              isDisabled={true}\r\n              mt={8}\r\n              w={'full'}\r\n              bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n              color={'white'}\r\n              _hover={{\r\n                bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                boxShadow: 'xl',\r\n              }}>\r\n              Registar entrada\r\n            </Button>: <Button\r\n              fontFamily={'heading'}\r\n              isDisabled={false}\r\n              mt={8}\r\n              w={'full'}\r\n              bgGradient=\"linear(to-r, red.400,pink.400)\"\r\n              color={'white'}\r\n              _hover={{\r\n                bgGradient: 'linear(to-r, red.400,pink.400)',\r\n                boxShadow: 'xl',\r\n              }}>\r\n              Registar entrada\r\n            </Button>}\r\n\r\n          </Box>\r\n          form\r\n        </Stack>\r\n      </Container>\r\n      <Blur\r\n        position={'absolute'}\r\n        top={-10}\r\n        left={-10}\r\n        style={{ filter: 'blur(70px)' }}\r\n      />\r\n\r\n{imagem==''? '': <Card_visita nome={nome} img={imagem} cpf={cpf}/>}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport const Blur = (props: IconProps) => {\r\n  return (\r\n    <Icon\r\n      \r\n      height=\"560px\"\r\n      viewBox=\"0 0 528 560\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}>\r\n      <circle cx=\"71\" cy=\"61\" r=\"111\" fill=\"#F56565\" />\r\n      <circle cx=\"244\" cy=\"106\" r=\"139\" fill=\"#ED64A6\" />\r\n      <circle cy=\"291\" r=\"139\" fill=\"#ED64A6\" />\r\n      <circle cx=\"80.5\" cy=\"189.5\" r=\"101.5\" fill=\"#ED8936\" />\r\n      <circle cx=\"196.5\" cy=\"317.5\" r=\"101.5\" fill=\"#ECC94B\" />\r\n      <circle cx=\"70.5\" cy=\"458.5\" r=\"101.5\" fill=\"#48BB78\" />\r\n      <circle cx=\"426.5\" cy=\"-0.5\" r=\"101.5\" fill=\"#4299E1\" />\r\n    </Icon>\r\n  );\r\n};","import React,{useState} from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  Text,\r\n  Link,\r\n  VStack,\r\n  Code,\r\n  Grid,\r\n  theme,\r\n} from \"@chakra-ui/react\"\r\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\r\nimport { Logo } from \"./Logo\"\r\nimport Form_visita from './components/Form'\r\nimport Card_visita from \"./components/card\"\r\n\r\n//import WebcamCapture from './components/webcam'\r\n\r\n\r\nexport default function App(){\r\n  \r\n  return(\r\n    <ChakraProvider theme={theme}>\r\n    <Box textAlign=\"center\" fontSize=\"xl\">\r\n   \r\n    <Form_visita/>\r\n    <ColorModeSwitcher justifySelf=\"flex\" />\r\n    </Box>\r\n  </ChakraProvider>\r\n  )\r\n}\r\n\r\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\r\nimport * as React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport  App  from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}